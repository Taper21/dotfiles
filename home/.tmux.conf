set -g default-shell /bin/zsh

# option for nvim color
set-option -ga terminal-overrides ",xterm-256color:Tc" 

 # smart pane switching with awareness of vim splits
 bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'n?vim' && tmux send-keys C-h) || tmux select-pane -L"
 bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'n?vim' && tmux send-keys C-j) || tmux select-pane -D"
 bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'n?vim' && tmux send-keys C-k) || tmux select-pane -U"
 bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq 'n?vim' && tmux send-keys C-l) || tmux select-pane -R"
 bind -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"

 # Smart pane switching with awareness of Vim splits.
 # See: https://github.com/aserowy/tmux.nvim
  
 is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

 bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
 bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
 bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
 bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

 bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
 bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
 bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
 bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'


 #arrow-keys resize window
 is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

 bind -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 1'
 bind -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 1'
 bind -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 1'
 bind -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 1'

 bind-key -T copy-mode-vi M-h resize-pane -L 1
 bind-key -T copy-mode-vi M-j resize-pane -D 1
 bind-key -T copy-mode-vi M-k resize-pane -U 1
 bind-key -T copy-mode-vi M-l resize-pane -R 1

# arrow-keys resize window
 bind-key -n 'C-left' resize-pane -L 1
 bind-key -n 'C-right' resize-pane -R 1
 bind-key -n 'C-down' resize-pane -D 1
 bind-key -n 'C-up' resize-pane -U 1

# vim keys for scrolling


set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi V send -X select-line
#bind-key -T copy-mode-vi y send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

set -s set-clipboard external

set -as terminal-overrides ',rxvt-unicode-256color:Ms=\E]52;%p1%s;%p2%s\007'




# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
#
#Ctrl-space als tmux leader
unbind-key C-b
set -g prefix 'C- '
bind-key 'C- ' send-prefix
bind-key 'C- ' last-window

#new window and new pane with same directory as current
bind-key c neww -c '#{pane_current_path}'
# split windows with v and h and in current directory
bind '"' split-window -c "#{pane_current_path}"
bind '%' split-window -h -c "#{pane_current_path}"

#set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"
# set -g default-command "reattach-to-user-namespace -l ${SHELL}"

###########################################################################
# Mouse mode is on by default.
# <prefix> M -- to turn it off
# <prefix> m -- to turn it on
#
# As of tmux 2.1, a backward-incompatible change was introduced.
# mode-mouse and mouse-* no longer exist, replaced by simply
# mouse <on|off>. Which is great, and easier, but unfortunately I use
# tmux on systems which I don't foresee going to 2.1+ anytime soon.
# So, time to test versions... this is kind of cheap and hacky, and it
# won't work for 2.2 and beyond, but will work for now. I tried to make
# this more generalized but have not been successful so far.
#
set -g mouse on

# Renumber windows
set -g renumber-windows on

# Reload tmux.conf
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded!"

###########################################################################
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
#set -g @plugin 'tmux-plugins/tmux-sensible'
#set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
#set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
#set -g @plugin 'tmux-plugins/NHDaly/tmux-scroll-copy-mode'
#set -g @plugin 'tmux-plugins/christoomey/vim-tmux-navigator'
# set -g @plugin 'aserowy/tmux.nvim'

set -g @plugin 'dracula/tmux'
# available plugins: battery, cpu-usage, git, gpu-usage, ram-usage, network, network-bandwidth, network-ping, weather, time
set -g @dracula-plugins "weather cpu-usage ram-usage battery time"
set -g @dracula-show-timezone false
set -g @dracula-military-time true
set -g @dracula-day-month true
set -g @dracula-show-fahrenheit false
set -g @dracula-show-powerline false
set -g @dracula-show-flags true
set -g @dracula-show-location false

# available colors: white, gray, dark_gray, light_purple, dark_purple, cyan, green, orange, red, pink, yellow
# set -g @dracula-[plugin-name]-colors "[background] [foreground]"
set -g @dracula-cpu-usage-colors "orange dark_gray"
set -g @dracula-ram-usage-colors "cyan dark_gray"
set -g @dracula-battery-colors "dark_purple dark_gray"
set -g @dracula-weather-colors " dark_gray"
set -g @dracula-time-colors "gray dark_gray"


set -g default-terminal "xterm-256color"




#
# # Other examples:
# # set -g @plugin 'github_username/plugin_name'
# # set -g @plugin 'git@github.com/user/plugin'
# # set -g @plugin 'git@bitbucket.com/user/plugin'
#
# # Initialize TMUX plugin manager (keep this line at the very bottom of
# tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
#set -g @tpm_plugins

###########################################################################
# Plugins
